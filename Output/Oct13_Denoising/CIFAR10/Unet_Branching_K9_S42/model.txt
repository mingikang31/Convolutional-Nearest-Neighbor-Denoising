training: False
_parameters: {}
_buffers: {}
_non_persistent_buffers_set: set()
_backward_pre_hooks: OrderedDict()
_backward_hooks: OrderedDict()
_is_full_backward_hook: None
_forward_hooks: OrderedDict()
_forward_hooks_with_kwargs: OrderedDict()
_forward_hooks_always_called: OrderedDict()
_forward_pre_hooks: OrderedDict()
_forward_pre_hooks_with_kwargs: OrderedDict()
_state_dict_hooks: OrderedDict()
_state_dict_pre_hooks: OrderedDict()
_load_state_dict_pre_hooks: OrderedDict()
_load_state_dict_post_hooks: OrderedDict()
_modules: {'down_layers': ModuleList(
  (0): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(3, 16, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
      )
      (branch2): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(32, 16, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
      )
      (branch2): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(3, 16, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
        )
        (branch2): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(32, 16, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
        )
        (branch2): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
  (1): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(32, 32, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
      )
      (branch2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(64, 32, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
      )
      (branch2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(32, 32, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
        )
        (branch2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(64, 32, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
        )
        (branch2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
  (2): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(64, 64, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
      )
      (branch2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(128, 64, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
      )
      (branch2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(64, 64, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
        )
        (branch2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(128, 64, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
        )
        (branch2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
  (3): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(128, 128, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
      )
      (branch2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(256, 128, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
      )
      (branch2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(128, 128, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
        )
        (branch2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(256, 128, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
        )
        (branch2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
), 'conv': ConvBlock(
  (conv1): Conv2d_Branching(
    (branch1): Conv2d_NN(
      (shuffle_layer): PixelShuffle(upscale_factor=0)
      (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
      (conv1d_layer): Conv1d(256, 256, kernel_size=(9,), stride=(9,))
      (flatten): Flatten(start_dim=2, end_dim=-1)
      (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([2, 2]))
    )
    (branch2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same)
    (pointwise_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
  )
  (conv2): Conv2d_Branching(
    (branch1): Conv2d_NN(
      (shuffle_layer): PixelShuffle(upscale_factor=0)
      (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
      (conv1d_layer): Conv1d(512, 256, kernel_size=(9,), stride=(9,))
      (flatten): Flatten(start_dim=2, end_dim=-1)
      (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([2, 2]))
    )
    (branch2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=same)
    (pointwise_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
  )
  (conv_layer): Sequential(
    (0): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(256, 256, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([2, 2]))
      )
      (branch2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(512, 256, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([2, 2]))
      )
      (branch2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
), 'up_layers': ModuleList(
  (0): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(512, 128, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
      )
      (branch2): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(256, 128, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
      )
      (branch2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(512, 128, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
        )
        (branch2): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(256, 128, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([4, 4]))
        )
        (branch2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
  (1): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(256, 64, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
      )
      (branch2): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(128, 64, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
      )
      (branch2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(256, 64, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
        )
        (branch2): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(128, 64, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([8, 8]))
        )
        (branch2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
  (2): ConvBlock(
    (conv1): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(128, 32, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
      )
      (branch2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): Conv2d_Branching(
      (branch1): Conv2d_NN(
        (shuffle_layer): PixelShuffle(upscale_factor=0)
        (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
        (conv1d_layer): Conv1d(64, 32, kernel_size=(9,), stride=(9,))
        (flatten): Flatten(start_dim=2, end_dim=-1)
        (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
      )
      (branch2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
      (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_layer): Sequential(
      (0): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(128, 32, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
        )
        (branch2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(64, 32, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([16, 16]))
        )
        (branch2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
  )
  (3): Sequential(
    (0): ConvBlock(
      (conv1): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(64, 16, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
        )
        (branch2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv2): Conv2d_Branching(
        (branch1): Conv2d_NN(
          (shuffle_layer): PixelShuffle(upscale_factor=0)
          (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
          (conv1d_layer): Conv1d(32, 16, kernel_size=(9,), stride=(9,))
          (flatten): Flatten(start_dim=2, end_dim=-1)
          (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
        )
        (branch2): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
        (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv_layer): Sequential(
        (0): Conv2d_Branching(
          (branch1): Conv2d_NN(
            (shuffle_layer): PixelShuffle(upscale_factor=0)
            (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
            (conv1d_layer): Conv1d(64, 16, kernel_size=(9,), stride=(9,))
            (flatten): Flatten(start_dim=2, end_dim=-1)
            (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
          )
          (branch2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
          (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d_Branching(
          (branch1): Conv2d_NN(
            (shuffle_layer): PixelShuffle(upscale_factor=0)
            (unshuffle_layer): PixelUnshuffle(downscale_factor=0)
            (conv1d_layer): Conv1d(32, 16, kernel_size=(9,), stride=(9,))
            (flatten): Flatten(start_dim=2, end_dim=-1)
            (unflatten): Unflatten(dim=2, unflattened_size=torch.Size([32, 32]))
          )
          (branch2): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=same)
          (pointwise_conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
      )
    )
    (1): Conv2d(32, 3, kernel_size=(1, 1), stride=(1, 1))
  )
), 'up_transpose_layers': ModuleList(
  (0): TransposeConvBlock(
    (layers): Sequential(
      (0): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (1): TransposeConvBlock(
    (layers): Sequential(
      (0): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (2): TransposeConvBlock(
    (layers): Sequential(
      (0): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (3): TransposeConvBlock(
    (layers): Sequential(
      (0): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
)}
args: Namespace(model='unet', layer='Branching', channels=32, num_pool_layers=4, num_layers=17, K=9, kernel_size=3, padding=1, sampling_type='all', num_samples=-1, sample_padding=0, shuffle_pattern='NA', shuffle_scale=0, magnitude_type='cosine', similarity_type='Col', aggregation_type='Col', lambda_param=0.5, branch_ratio=0.5, dataset='cifar10', data_path='./Data/BSD68', noise_std=0.1, batch_size=64, num_epochs=50, use_amp=False, clip_grad_norm=None, optimizer='adamw', momentum=0.9, weight_decay=0.0005, lr=0.01, lr_step=2, lr_gamma=0.95, scheduler='step', device='cuda', seed=42, output_dir='./Output/Oct13_Denoising/CIFAR10/Unet_Branching_K9_S42', test_only=False, img_size=torch.Size([3, 32, 32]), total_params=8641923, trainable_params=8641923)
in_channels: 3
out_channels: 3
channels: 32
num_pool_layers: 4
name: UNet Branching
